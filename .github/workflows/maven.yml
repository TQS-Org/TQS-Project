# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# we can build and run tests in a single step or do it in multiple steps...
# the "package" phase on maven implicitly will download dependencies, build classes, run unit tests, and package classes

name: CI with Maven and SonarCloud

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      # don't run this workflow when the are pushes, and there are only changes for this directories:
      - ".github/**"
      - "minutes/**"
      - "presentations/**"
      - "reports/**"
      # don't run this workflow when the are pushes and there are only changes for the following files:
      - "**.md"
      - "**.gitignore"
      
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      # don't run this workflow when the are pushes, and there are only changes for this directories:
      - ".github/**"
      - "minutes/**"
      - "presentations/**"
      - "reports/**"
      # don't run this workflow when the are pushes and there are only changes for the following files:
      - "**.md"
      - "**.gitignore"

  workflow_dispatch:

jobs:
  build:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '21' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Clean package of backend without tests
        working-directory: ./ChargeHub/backend
        run: mvn clean package -DskipTests

      - name: Write test application.properties
        run: |
          mkdir -p ./ChargeHub/backend/src/test/resources
          cat <<EOF > ./ChargeHub/backend/src/test/resources/application.properties
          spring.application.name=backend
          management.endpoints.web.exposure.include=health
          management.endpoint.health.show-details=always
          management.endpoint.health.enabled=true
          springdoc.swagger-ui.path=/swagger-ui-custom.html
          springdoc.api-docs.path=/api-docs
          jwt.secret=wBv3slbZ4PQNZQkRjrUQv9UVUKbLn7b/JchYmVK55LWVfFCkN2o1C0k9qigXHZCU4grZ7lj04qXw9Sx56Zay4ZQio8huHSHO8hdkusSHUsuu8232
          EOF

      - name: Write main application.properties
        run: |
          mkdir -p ./ChargeHub/backend/src/main/resources
          cat <<EOF > ./ChargeHub/backend/src/main/resources/application.properties
          spring.application.name=backend
          management.endpoints.web.exposure.include=health
          management.endpoint.health.show-details=always
          management.endpoint.health.enabled=true
          springdoc.swagger-ui.path=/swagger-ui-custom.html
          springdoc.api-docs.path=/api-docs
          jwt.secret=wBv3slbZ4PQNZQkRjrUQv9UVUKbLn7b/JchYmVK55LWVfFCkN2o1C0k9qigXHZCU4grZ7lj04qXw9Sx56Zay4ZQio8huHSHO8hdkusSHUsuu8232
          EOF

      - name: Build and run unit tests
        working-directory: ./ChargeHub/backend
        run: mvn -B package --file pom.xml

      - name: Run integration tests
        working-directory: ./ChargeHub/backend
        run: mvn -B integration-test verify --file pom.xml

      - name: Run SonarQube analysis
        working-directory: ./ChargeHub/backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=TQS-Org_TQS-Project \
            -Dsonar.organization=tqs-org \
            -Dsonar.token=${{ env.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Add code coverage information to PR
        id: jacoco-pr
        uses: madrapps/jacoco-report@v1.7.1
        if: github.event_name == 'pull_request'
        with:
          paths: |
            ${{ github.workspace }}/**/target/site/jacoco-merged-test-coverage-report/jacoco.xml 
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 80

      - name: Push results to Xray on Jira Cloud
        working-directory: ./ChargeHub/backend
        if: always()
        env:
          XRAYCLOUD_CLIENT_ID: ${{ secrets.XRAYCLOUD_CLIENT_ID }}
          XRAYCLOUD_CLIENT_SECRET: ${{ secrets.XRAYCLOUD_CLIENT_SECRET }}
        run: |
          mvn \
            -Dxray.clientId=${{ env.XRAYCLOUD_CLIENT_ID }} \
            -Dxray.clientSecret=${{ env.XRAYCLOUD_CLIENT_SECRET }} \
            -Dxray.projectKey=SCRUM \
            -Dxray.reportFormat=junit \
            -Dxray.reportFile=target/TEST-junit-jupiter.xml \
            app.getxray:xray-maven-plugin:import-results
